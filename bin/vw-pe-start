#!/bin/bash

# Parallel Environment setup script
# Not meant to be invoked directly

function usage()
{
    echo "Usage: `basename $0` -h hostfile [-l log_id]"
    echo "       `basename $0` -?"
    echo
    echo "	-l log_id       Log identifier (determines name of log files)"
    echo "	                Default is 'TEST'"
    echo "	-h hostfile     \$pe_hostfile"
    echo "	-?              Prints this usage message"
    echo
}



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~ BASIC SANITY CHECKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ "$WORKSPACE_DIR" == "" ];
then
    echo "WORKSPACE_DIR not set."
    exit 1
fi

if [ "$WORKSPACE_VAR" == "" ];
then
    echo "WORKSPACE_VAR not set."
    exit 1
fi

if [ "$JOB_ID" == "" ];
then
    JOB_ID=0
fi

if [ "$SGE_TASK_ID" == "" ];
then
    SGE_TASK_ID=0
fi

if [ "$JOB_NAME" == "" ];
then
    JOB_NAME="NULL"
fi

if [ $# -eq 0 ];
then
    echo "ERROR: No arguments specified!"
    usage
    exit 1
fi

source "$WORKSPACE_DIR/bin/common.sh"

# Error on unset variables
set -u




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GET OPTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Defaults
LOG_ID="TEST"
TAG="NULL"

# Get options
while getopts ":l:h:?" OPTION; do
    case $OPTION in
	l ) 
	    LOG_ID=$OPTARG
	;;
	h ) 
	    PE_HOSTFILE=$OPTARG
	;;
	\? ) 
	    usage
	    exit 1
	;;
	* ) 
	    echo "ERROR: Unrecognized option"
	    exit 1
	;;
    esac
done



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN CODE BEGINS HERE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

ERROR=0
HOSTFILE=/var/workspace/global/hostfiles/$JOB_ID

BANNER="job_name=$JOB_NAME, job_id=$JOB_ID, task_id=$SGE_TASK_ID"

log "--PESTART_START-- $BANNER"

while read line; 
do
    HOST=$(echo $line | cut -f1 -d" ")
    NUMIMAGES=$(echo $line | cut -f2 -d" ")

    for I in $(seq $NUMIMAGES); 
    do
	echo $HOST >> $HOSTFILE
    done
done < $PE_HOSTFILE

log "--PESTART_END-- $BANNER"
