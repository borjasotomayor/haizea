#!/bin/bash

function usage()
{
    echo "Usage: `basename $0` [-d graph_dir] [-o output_type] log_id1 [[[log_id2] log_id3] ... ]"
    echo "       `basename $0` -?"
    echo
    echo "      -d graph_dir    Directory in which to produce plotting data."
    echo "                      Default is \$WORKSPACE_VAR/graphs/cachehitmiss/\$GRAPH_NAME"
    echo "                      where \$GRAPH_NAME is generated based on the log ids"
    echo "      -o output_type  Besides generating the GNUPlot file, use GNUPlot to generate"
    echo "                      a file of type <output_type> (called 'graph.<output_type>')"
    echo "                      Valid types are png, jpg, pdf, and eps."
    echo "      log_idN         Log identifiers to analyze"
    echo "      -?              Prints this usage message"
    echo
}



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~ BASIC SANITY CHECKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ "$WORKSPACE_DIR" == "" ];
then
    echo "WORKSPACE_DIR not set."
    exit 1
fi

if [ "$WORKSPACE_VAR" == "" ];
then
    echo "WORKSPACE_VAR not set."
    exit 1
fi

if [ $# -eq 0 ];
then
    echo "ERROR: No arguments specified!"
    usage
    exit 1
fi

# Error on unset variables
set -u




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GET OPTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Defaults
GRAPH_DIR=""
OUTPUT_TYPE=""

# Get options
while getopts ":d:o:?" OPTION; do
    case $OPTION in
        d )
            GRAPH_DIR=$OPTARG
	;;
        o )
            OUTPUT_TYPE=$OPTARG
        ;;
        \? )
            usage
            exit 1
        ;;
        * )
            echo "ERROR: Unrecognized option"
            exit 1
        ;;
    esac
done

shift `expr $OPTIND - 1`

if [ $# -eq 0 ];
then
    echo "ERROR: Must specify at least one log id"
    usage
    exit 1
fi

if [ "$GRAPH_DIR" == "" ];
then
    GRAPH_DIR=$WORKSPACE_VAR/graphs/cachehitmiss

    for LOG_ID in $@;
    do
        GRAPH_DIR=${GRAPH_DIR}_$LOG_ID
    done
fi


# Generate cache hit/miss counts

mkdir -p $GRAPH_DIR

for LOG_ID in $@;
do
    vw-log-countevent -l $LOG_ID -e "CACHE_HIT" -o $GRAPH_DIR/hit_$LOG_ID.dat
    vw-log-countevent -l $LOG_ID -e "CACHE_MISS" -o $GRAPH_DIR/miss_$LOG_ID.dat
done


# Generate GNUPlot file

I=1

echo "set xlabel \"Time (s)\"" > $GRAPH_DIR/hitmiss.plot
echo "set ylabel \"Cache hits/misses\"" >> $GRAPH_DIR/hitmiss.plot
echo "plot \\" >> $GRAPH_DIR/hitmiss.plot
for LOG_ID in $@;
do
    echo "\"hit_$LOG_ID.dat\" using 1:2 t \"Cache hits ($LOG_ID)\" lt $I pt 5 with linespoints,\\" >> $GRAPH_DIR/hitmiss.plot
    echo -n "\"miss_$LOG_ID.dat\" using 1:2 t \"Cache misses ($LOG_ID)\" lt $I pt 2 with linespoints" >> $GRAPH_DIR/hitmiss.plot
    if [ $I -lt $# ];
    then
	echo ",\\" >> $GRAPH_DIR/hitmiss.plot
    fi 
    I=$((I+1))
done

if [ "$OUTPUT_TYPE" != "" ];
then
    echo "set output \"$GRAPH_DIR/graph.$OUTPUT_TYPE\"" > $GRAPH_DIR/hitmiss_$OUTPUT_TYPE.plot.tmp
    echo "set terminal $OUTPUT_TYPE" >> $GRAPH_DIR/hitmiss_$OUTPUT_TYPE.plot.tmp
    cat $GRAPH_DIR/hitmiss_$OUTPUT_TYPE.plot.tmp $GRAPH_DIR/hitmiss.plot > $GRAPH_DIR/hitmiss_$OUTPUT_TYPE.plot
    rm $GRAPH_DIR/hitmiss_$OUTPUT_TYPE.plot.tmp
    cd $GRAPH_DIR
    gnuplot hitmiss_$OUTPUT_TYPE.plot
fi