#!/bin/bash

# Mock VW execution script
# Not meant to be invoked directly

function usage()
{
    echo "Usage: `basename $0` -l log_id -d duration -i image -n num_nodes -c config -t -w"
    echo "       `basename $0` -?"
    echo
    echo "	-l log_id       Log identifier (determines name of log files)"
    echo "	                Default is 'TEST'"
    echo "	-?              Prints this usage message"
    echo
}



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~ BASIC SANITY CHECKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ "$WORKSPACE_DIR" == "" ];
then
    echo "WORKSPACE_DIR not set."
    exit 1
fi

if [ "$WORKSPACE_VAR" == "" ];
then
    echo "WORKSPACE_VAR not set."
    exit 1
fi

if [ "$JOB_ID" == "" ];
then
    JOB_ID=0
fi

if [ "$SGE_TASK_ID" == "" ];
then
    SGE_TASK_ID=0
fi

if [ "$JOB_NAME" == "" ];
then
    JOB_NAME="NULL"
fi

if [ $# -eq 0 ];
then
    echo "ERROR: No arguments specified!"
    usage
    exit 1
fi

source $WORKSPACE_DIR/bin/common.sh

# Error on unset variables
set -u

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GET OPTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Defaults
LOG_ID="TEST"
TAG="NONE"
RUN=true
WAIT=false
NAME="JOBNAME"

# Get options
while getopts "N:c:uwi:s:e:l:t:d:n:h:?" OPTION; do
    case $OPTION in
	l ) 
	    LOG_ID=$OPTARG
	;;
	h ) 
	    HOSTFILE=$OPTARG
	;;
	s ) 
	    START=$OPTARG
	;;
	e ) 
	    END=$OPTARG
	;;
	d ) 
	    DURATION=$OPTARG
	;;
	i ) 
	    IMAGE=$OPTARG
            IMG_ID=`echo $IMAGE | rev | cut -f1 -d/ | rev`
	;;
	c ) 
	    CONFIG=$OPTARG
	;;
	n ) 
	    NUMNODES=$OPTARG
	;;
	N ) 
	    NAME=$OPTARG
	;;
	t ) 
	    TAG=$OPTARG
	;;
	u ) 
	    RUN=false
	;;
	w ) 
	    WAIT=true
	;;
	\? ) 
	    usage
	    exit 1
	;;
	* ) 
	    echo "ERROR: Unrecognized option"
	    exit 1
	;;
    esac
done



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN CODE BEGINS HERE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

ERROR=0

echo -n "Requesting reservation... "

NUMPHYSNODES=$(($NUMNODES/2))

RESPARAMS="-s $START -e $END -n $NUMPHYSNODES -x"

if true;
then
    QUEUE=`plus_reserve $RESPARAMS`
else
    QUEUE="RR"
    echo "plus_reserve $RESPARAMS"
fi

echo $QUEUE

echo "Submitting VW parallel environment..."

QSUBPARAMS="-q $QUEUE -N $NAME -pe ar_vw $NUMNODES $WORKSPACE_DIR/bin/vw-runlocal-ar-sgewrapper -l $LOG_ID -d $DURATION -i $IMAGE -c $CONFIG"

if $RUN;
then
    JOBID=`qsub $QSUBPARAMS | awk '{print $3}'`
else
    JOBID="TEST"
    echo "qsub $QSUBPARAMS"
fi

echo "VW submitted with JobID=$JOBID"

HOSTFILE="/var/workspace/hostfiles/${JOBID}ar"

echo -n "Creating hostfile..."

plus_status -r $QUEUE | awk '$1=="nodes" {for (i=2; i<=NF; i++) print $i "\n" $i }' > $HOSTFILE

echo "done!"

IMGNUMBER=1

for HOST in $(cat $HOSTFILE);
do
    echo "Submitting transfer of $IMAGE to $HOST"
    if $RUN;
    then
	qsub -N TRANSFER_$JOBID -q transfer.q@$HOST  $WORKSPACE_DIR/bin/vw-transfer-image-sgewrapper -i $IMAGE -s SIZE -l $LOG_ID -c $CONFIG -r -f $JOBID.$IMGNUMBER -t $TAG
    else
	echo qsub -N TRANSFER_$JOBID -q transfer.q@$HOST  $WORKSPACE_DIR/bin/vw-transfer-image-sgewrapper -i $IMAGE -s SIZE -l $LOG_ID -c $CONFIG -r -f $JOBID.$IMGNUMBER -t $TAG
    fi
    IMGNUMBER=$(($IMGNUMBER +1))
done

if $WAIT;
then
    echo "Waiting for job to complete"
    waitForJob $JOB_ID 
fi


