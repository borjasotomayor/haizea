#!/bin/bash

# Image transfer submit script


function usage()
{
    echo "Usage: `basename $0` -i image_uri -s image_size [-c config_file] [-l log_id]"
    echo "                         [-d duration] [-t tag] [-z deadline]"
    echo "       `basename $0` -?"
    echo
    echo "	-i image_uri    URI of image to transfer"
    echo "	-s image_size   Size of image (NOTE: not currently required to have a"
    echo "	                valid value. Size is infered from image file)"
    echo "	-c config_file  Configuration file to use in this transfer." 
    echo "	                Default is \$WORKSPACE_DIR/etc/worksp.conf."
    echo "	-l log_id       Log identifier (determines name of log files)"
    echo "	                Default is 'TEST'"
    echo "	-d duration     Sleep for <duration> seconds after image transfer"
    echo "	                (simulates a VM running after transfer)."
    echo "	                Default is to not sleep."
    echo "	-t tag          Include tag <tag> in log messages."
    echo "	                Default is to not sleep."    
    echo "	-z deadline     Transfer deadline (informative only)"
    echo "	-?              Prints this usage message"
    echo
}



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~ BASIC SANITY CHECKS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

if [ "$WORKSPACE_DIR" == "" ];
then
    echo "WORKSPACE_DIR not set."
    exit 1
fi

if [ "$WORKSPACE_VAR" == "" ];
then
    echo "WORKSPACE_VAR not set."
    exit 1
fi

if [ "$JOB_ID" == "" ];
then
    JOB_ID=0
fi

if [ "$SGE_TASK_ID" == "" ];
then
    SGE_TASK_ID=0
fi

if [ "$JOB_NAME" == "" ];
then
    JOB_NAME="NULL"
fi

if [ $# -eq 0 ];
then
    echo "ERROR: No arguments specified!"
    usage
    exit 1
fi

# Error on unset variables
set -u




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GET OPTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Defaults
LOG_ID="TEST"
TAG="NONE"
CONFIG_FILE="$WORKSPACE_DIR/etc/worksp.conf"
IMG=""
IMG_SIZE=""
DURATION=0
DEADLINE=0

# Get options
while getopts ":i:s:l:t:c:d:z:?" OPTION; do
    case $OPTION in
	i ) 
	    IMG=$OPTARG
	    IMG_ID=`echo $IMG | rev | cut -f1 -d/ | rev`
	    IMG_PROTOCOL=`echo $IMG | cut -f1 -d:`
	;;
	s ) 
	    IMG_SIZE=$OPTARG
	;;
	l ) 
	    LOG_ID=$OPTARG
	;;
	d ) 
	    DURATION=$OPTARG
	;;
	z ) 
	    DEADLINE=$OPTARG
	;;
	t ) 
	    TAG=$OPTARG
	;;
	c ) 
	    CONFIG_FILE=$OPTARG
	    if [ ! -f $CONFIG_FILE ];
	    then
		echo "ERROR: Config file $CONFIG_FILE not found"
		exit 1
	    fi
	;;
	\? ) 
	    usage
	    exit 1
	;;
	* ) 
	    echo "ERROR: Unrecognized option"
	    exit 1
	;;
    esac
done

if [ "$IMG" == "" ];
then
    echo "ERROR: No image specified."
    usage
    exit 1
fi

#The following is a kludge (for convenience). The real script should expect the size as a parameter.
IMG_SIZE=$(du -b `echo $IMG | cut -d: -f2 | cut -c3-` | cut -f1)


source "$WORKSPACE_DIR/bin/common.sh"
source "$WORKSPACE_DIR/bin/protocols.sh"
source "$WORKSPACE_DIR/bin/getimage.sh"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN CODE BEGINS HERE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

ERROR=0


BANNER="img=$IMG, job_name=$JOB_NAME, job_id=$JOB_ID, task_id=$SGE_TASK_ID"

log "--TRANSFER_START-- $BANNER"

# Reads configuration file
readConfig

if [ ! -f "$WORKSPACE_DIR/bin/cache/$CACHE_TYPE.sh" ];
then
    log "ERROR: Unknown cache type '$CACHE_TYPE'"
    exit 1
fi

source "$WORKSPACE_DIR/bin/cache/common.sh"
source "$WORKSPACE_DIR/bin/cache/$CACHE_TYPE.sh"

if [ "$CACHE_TYPE" == "NoCache" ];
then
    getImageDirectly
else
    getImageThroughCache
fi

log "--TRANSFER_END--"

if [ $ERROR -eq 1 ];
then
    log "ERROR: Fatal error in image transfer."
    rm $LOCAL_IMG
else
    TIMESTAMP=`date +%s`
    if [ $DEADLINE -gt 0 ];
    then
	if [ $TIMESTAMP -gt $DEADLINE ];
	then
	    DELAY=$(($TIMESTAMP - $DEADLINE))
	    log "--DEADLINE_NOTONTIME-- Starting at $TIMESTAMP, should be starting at $DEADLINE"
	    log "--DEADLINE_OVERHEAD-- $DELAY"
	else
	    log "--DEADLINE_ONTIME--"
	fi
    fi
    if [ $DURATION -gt 0 ];
    then
        #log "--VM_START-- Starting VM #$SGE_TASK_ID of workspace $JOB_NAME"
	#sleep $DURATION
        #log "--VM_END-- Stopping VM #$SGE_TASK_ID of workspace $JOB_NAME"
	log "--VM_RUNNING-- $DURATION seconds"
        if [ $DEADLINE -gt 0 ] && [ $TIMESTAMP -gt $DEADLINE ];
	then
	    RUNREAL=$(($DURATION-$DELAY))
	    if [ $RUNREAL -lt 0 ];
	    then
		"--VM_UNABLETORUN--"
		RUNREAL=0
	    fi
    	    log "--VM_RUNNING_REAL-- $RUNREAL seconds"
	else
    	    log "--VM_RUNNING_REAL-- $DURATION seconds"
	fi
	if [ $CACHE_TYPE == "LAD" ];
	then
	    updateDurationCacheFile $GLOBAL_CACHE_DB $IMG_ID $DURATION
	fi
    fi
    log "Removing local image"
    rm $LOCAL_IMG
fi

log "--SUBMIT_END-- $BANNER"
